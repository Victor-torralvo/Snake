import pygame , pytmx
from random import randint

pygame.init()

class TileMap:
    """Classe que tem como função ler e organizar os mapas do jogo que seram do tipo 'tmx'.
            Os mapas são criados com 'tiles' que são pequenos ladrilhos que se juntam para formar o mapa.
    """
    def __init__(self):
        """Variaveis
        'data_tmx' o mapa carregado pela função 'load_pygame' armazena o mapa e fornecer acesso a todas sua
        funcionalidades.

        'width' armazena a largura do mapa.
        'height' armazena a altura do mapa.
            -As variaveis 'width' e 'height' são multiplicadas pelo tamanho do 'tiles', para assim obter
            os valores reais do mapa.

        'tiles' é resposavel por armazenar todos os 'tiles' colisiveis do mapa.
        """

        self.data_tmx = pytmx.load_pygame('TileSet/Fase01.tmx', pixelalpha=True)
        self.width = self.data_tmx.width * self.data_tmx.tilewidth
        self.height = self.data_tmx.height * self.data_tmx.tileheight
        self.tiles = []

    def _render(self, surface):
        """Função responsavel por organizar e posicionar os 'tileds' em uma 'surface',
        que será a representação grafica do mapa"""

        for layer in self.data_tmx.visible_layers:
            if isinstance(layer, pytmx.TiledTileLayer):
                for x, y, gid in layer:
                    tile = self.data_tmx.get_tile_image_by_gid(gid)
                    if tile:
                        surface.blit(tile, (x * self.data_tmx.tilewidth,
                                            y * self.data_tmx.tileheight))

                        prop = self.data_tmx.get_tile_properties_by_gid(gid)
                        if prop != None:
                            if 'Wall' in prop.keys():
                                if prop['Wall']:
                                    self.tiles.append(pygame.Rect(x * self.data_tmx.tilewidth,
                                                                  y * self.data_tmx.tileheight,
                                                                  self.data_tmx.tilewidth,self.data_tmx.tileheight))

    def make(self):
        """Retorna uma surface com o todos os tiles desenhados"""
        temp_surf = pygame.Surface((self.width,self.height))
        self._render(temp_surf)
        return temp_surf

class Snake:
    def __init__(self):
        """
        Defini o tamanho de cada segmento da snake, número de segmentos e suas repectivas posições
        Quatidde de frutas digeridas e também a velocidade de movimento
        A variavel 'displacement' armazena a posição atual da cabeça da cobra que é usada para definir a posição resto
        do corpo.
        """
        self.fruits = 3
        self.displacement = [0, 0]
        self.velocity = 6
        self.snake = [(300, 150)]
        self.size = [16,16]
    def add_snake(self):
        """
        Adiciona um novo segmento ao fim do corpo da cobra com base no número de frutas digeridas.
        """
        if len(self.snake) < self.fruits:
            self.snake.append((0,0))

    def collide_test(self, tiles, rect):
        """#Função que controla as colisões da cobra, recebe a lista de tiles e a primeira posição da cobra"""
        temp_tiles = []
        for tile in tiles:
            if rect.colliderect(tile):
                temp_tiles.append(tile)
        return temp_tiles

    def moviment(self, tiles):
        """
        Atualiza a posição da cabeça da 'snake' e controla as colisões com paredes dentro do mapa.
        Apos ser definida a posição da cabeça as posição de cada segmento do corpo será atulizada recebendo o valor da posição antecessor.
        """
        rect = pygame.Rect(self.snake[0][0], self.snake[0][1], self.size[0], self.size[1])

        rect.x += self.displacement[0]

        for tile in self.collide_test(tiles, rect):
            if self.displacement[0] > 0:
                rect.right = tile.left
            elif self.displacement[0] < 0:
                rect.left = tile.right

        rect.y += self.displacement[1]
        for tile in self.collide_test(tiles, rect):
            if self.displacement[1] > 0:
                rect.bottom = tile.top
            elif self.displacement[1] < 0:
                rect.top = tile.bottom

        self.snake[0] = rect.x, rect.y

        for i in range(len(self.snake) - 1, 0, -1):#Atualiza a posição da cobra começando do fim
            self.snake[i] =  self.snake[i - 1][0], self.snake[i - 1][1]

    def direction(self):
        """
        Controla a direção e o deslocamento da 'snake', isso e feito controlando os eventos de teclado.
        """
        key = pygame.key.get_pressed()

        if key[pygame.K_w]:
            self.displacement[1] = -self.velocity
            self.displacement[0] = 0
        elif key[pygame.K_s]:
            self.displacement[1] = self.velocity
            self.displacement[0] = 0


        if key[pygame.K_d]:
            self.displacement[0] = self.velocity
            self.displacement[1] = 0
        elif key[pygame.K_a]:
            self.displacement[0] = -self.velocity
            self.displacement[1] = 0

    def update(self, tiles):
        """
        Controla a chamda de funções da snake a cada frame.
        """
        self.add_snake()
        self.direction()
        self.moviment(tiles)


class Fruit:
    """
    Cria uma fruta que que aparecera aleatoriamento no mapa, recebe os parametros 'x' e 'y' que representão as dimenções
    da janela. Possui um 'pos' que e gerada aleatoriamente e um rect que representa o 'hitbox' da fruta, além de uma
    cor que será usada quando a fruta for desenhada na tela.
     OBS: AS FRUTAS SÃO GERADAS DE FORMA ALEATORIA DENTRO DAS DIMENÇÕES DA TELA, NÃO SENDO IMPEDIDAS DE SEREM CRIADAS
     ENCIMA DE OUTRAS ESTRUTURAS COMO AS PAREDES.
    """
    def __init__(self, x, y):
        self.pos = randint(16, x - 16), randint(16, y - 16)
        self.size = (16, 16)
        self.color = 255, 50, 50
        self.rect = pygame.Rect(*self.pos, *self.size)


class Game:
    """"
    Gerencia a janela do jogo, assim como todas das regras do jogo e também é encarregado de desenhar cada elemento na
    tela.
    """
    def __init__(self):
        """
        Aqui são definidos as dimensões da janela e cria uma tela de exibição que será usada para desenhar cada elemento
        do jogo. Também seram chamadas algumas funções importantes como 'elements' que gera cada elemento do jogo,
        'time' que controla o número de frames que o jogo terá e 'game_loop' que controla o loop de execução do jogo.
        """
        self.screen_size = [1280,960]
        self.screen = pygame.display.set_mode(self.screen_size)
        self.elements()
        self.time = pygame.time.Clock()
        self.game_loop = True

    def elements(self):
        """
        Gera cada elemento presente no jogo: 'snake', 'map', 'map_image'
        OBG: 'MAP_IMAGE' É REPRESENTAÇÃO DO MAPA EM FORMA DE IMAGEM.
            E 'FRUITS' ARMAZENA CADA FRUTA PRESENTE NO MAPA.
        """
        self.snake = Snake()
        self.map = TileMap()
        self.map_image = self.map.make()
        self.fruits = []

    def start(self):
        """
        Controla o loop de execução do jogo, e tambeém gerencia o tratamento de eventos e chamdas de funções dentro do
        jogo.
        """
        while self.game_loop:
            self.time.tick(60)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.game_loop = False

            self.update()

    def add_fruit(self):
        """
        Gera uma fruta nova no mapa e armazena na variavel 'fruits' da jogo
        """
        if randint(0,150) == 5:
            self.fruits.append(Fruit(*self.screen_size))

    def player_fruit(self):
        """
        Verifica se a colisões entre cabeça da snake com as frutas, caso a mesma exista, uma fruta será adicionada a
        vareiavel 'fruit' pertencente a snake e sua velocidade será aumentada.
        """
        player = pygame.Rect(self.snake.snake[0][0], self.snake.snake[0][1], self.snake.size[0], self.snake.size[1])
        for fruit in self.fruits:
            if player.colliderect(fruit):
                self.snake.fruits += 1
                self.snake.velocity += 0.2

                if self.snake.velocity > 16:
                    self.snake.velocity = 16

                self.fruits.remove(fruit)

    def draw(self):
        """
        Dresenha todos elementos que devem ser visto pelo jogador.
        """
        self.screen.blit(self.map_image,(0,0))

        for fruit in self.fruits:
            pygame.draw.rect(self.screen,(255,0,75),fruit)

        for x, y in self.snake.snake:
            rect = pygame.Rect(x, y, self.snake.size[0], self.snake.size[1])
            pygame.draw.rect(self.screen,(60,179,113),rect)

        pygame.display.update()

    def update(self):
        """
        Responsavel por fazer a chamada de todas as funções que compõem as regras do jogo
        """
        self.add_fruit()
        self.snake.update(self.map.tiles)
        self.player_fruit()
        self.draw()

Game().start()


